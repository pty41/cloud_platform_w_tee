/*
 * Copyright (C) 2011-2018 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */


enclave {
    include "sgx_eid.h"
    from "../LocalAttestationCode/LocalAttestationCode.edl" import *;
    from "sgx_tstdc.edl" import *;
    trusted{
            public uint32_t create_local_session(sgx_enclave_id_t src_enclave_id, sgx_enclave_id_t dest_enclave_id);
            public uint32_t retrieve_encryptionkey_and_crypto_call(sgx_enclave_id_t src_enclave_id, sgx_enclave_id_t dest_enclave_id, [in, string] char *path, uint32_t term, [in, out, size=plainlen] uint8_t *plain, [in, out, size=cipherlen] uint8_t *ciphertext, int pathlen, int plainlen, int cipherlen, int encryptmode);
            public uint32_t close_local_session(sgx_enclave_id_t src_enclave_id, sgx_enclave_id_t dest_enclave_id);
            public uint32_t encryptkeyring([in, string] char *path, uint32_t term, [in, size=keyvaluelen] uint8_t *keyvalue, [in, size=plainlen] uint8_t *plain, [out, size=cipherlen] uint8_t *ciphertext, int pathlen, int keyvaluelen, int plainlen, int cipherlen);
            public uint32_t decryptkeyring([in, string] char *path, [in, size=keyvaluelen] uint8_t *keyvalue, [in, size=cipherlen] uint8_t *cipher, [out, size=plainlen] uint8_t *plaintext, int pathlen, int keyvaluelen, int cipherlen, int plainlen);
            public uint32_t decrypt_store_keyring_call(sgx_enclave_id_t src_enclave_id, sgx_enclave_id_t dest_enclave_id, [in, string] char *path, [in, size=keyvaluelen] uint8_t *keyvalue, [in, size=cipherlen] uint8_t *cipher, [out, size=plainlen] uint8_t *plaintext, int pathlen, int keyvaluelen, int cipherlen, int plainlen, [out] int *term);
    };
    untrusted {
            void ocall_print_string([in, string] char *str);
            void ocall_print_number(int number);
  };
};
